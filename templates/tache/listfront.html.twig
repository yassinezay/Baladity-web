{% extends 'base-front.html.twig' %}

{% block title %}Liste des Tâches{% endblock %}
{% block barreTitre %}
{% if 'Citoyen' in user.getTypeUser() %}
<li><a href="{{ path('app_main_front') }}" >Home</a></li>
					 <li class="dropdown"><a href="#"><span>Actualité</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_actualite') }}">Afficher Actualité</a></li>
							<li><a href="{{ path('app_publicite') }}">Afficher Publicité</a></li>
							<li><a href="{{ path('ajouterPub') }}">Ajouter Publicité</a></li>
						</ul>
					</li>
					 <li class="dropdown"><a href="#"><span>Reclamation</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('typeReclamationF') }}">Ajouter Réclamation</a></li>
							<li><a href="{{ path('afficherReclamationF') }}">Mes réclamations</a></li>
						</ul>
					</li>
                    <li class="dropdown"><a href="#"><span>Evénement</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('evenement_listCitoyen') }}">liste des Evenements</a></li>
							<li><a href="{{ path('ajouter_voteFront') }}">Ajouter proposition</a></li>
						</ul>
					</li>
					<li><a href="{{ path('chatgpt') }}">ChatGpt</a></li>
					<li><a href="contact.html">Contact</a></li>
                    <li><a href="contact.html">About Us</a></li>
					<li class="dropdown"><a href="#"><span>Profile</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_profile_fron') }}">Profile</a></li>
							<li><a href="{{ path('sign_out') }}">Logout</a></li>
						</ul>
					</li>
{% elseif 'Responsable employé' in user.getTypeUser() %}
<li><a href="{{ path('app_main_front') }}" >Home</a></li>
					<li class="dropdown"><a href="#"><span>Actualité</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_actualiteshowResponsable') }}">Afficher Actualité</a></li>
							<li><a href="{{ path('ajouterA2') }}">Ajouter Actualité</a></li>
						</ul>
					</li>
					 <li class="dropdown"><a href="#" ><span>Reclamation</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('typeReclamationF') }}">Ajouter Réclamation</a></li>
							<li><a href="{{ path('afficherReclamationF') }}">Mes réclamations</a></li>
						</ul>
					</li>
					 <li class="dropdown"><a href="#" ><span>Evenement</span> <i
						class="bi bi-chevron-down dropdown-indicator" class="active"></i></a>
						<ul>
							<li><a href="{{ path('evenement_listFront') }}">Liste des evenements</a></li>
							<li><a href="{{ path('ajouterFront_evenement') }}">Ajouter un evenement</a></li>
							<li><a href="{{ path('calendar') }}">Calendrier des evenements</a></li>
							<li><a href="{{ path('ajouter_voteFront') }}">Ajouter une proposition</a></li>
							<li><a href="{{ path('statsF') }}">Statistiques des evenements</a></li>


						</ul>
					</li>
					<li><a href="{{ path('equipement_show_responsable') }}">Equipement</a></li>
					<li><a href="{{ path('tache_listfront') }} " class="active">Taches</a></li>
					<li><a href="{{ path('chatgpt') }}">ChatGpt</a></li>
					 <li class="dropdown"><a href="#"><span>Profile</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_profile_fron') }}">Profile</a></li>
							<li><a href="{{ path('sign_out') }}">Logout</a></li>
						</ul>
					</li>
{% elseif 'Employé' in user.getTypeUser() %}
<li><a href="{{ path('app_main_front') }}">Home</a></li>
					 <li class="dropdown"><a href="#"><span>Actualité</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_actualite') }}">Afficher Actualité</a></li>
							<li><a href="{{ path('app_publicite') }}">Afficher Publicité</a></li>
							<li><a href="{{ path('ajouterPub') }}">Ajouter Publicité</a></li>
						</ul>
					</li>
					 <li class="dropdown"><a href="#"><span>Reclamation</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('typeReclamationF') }}">Ajouter Réclamation</a></li>
							<li><a href="{{ path('afficherReclamationF') }}">Mes réclamations</a></li>
						</ul>
					</li>
					  <li class="dropdown"><a href="#"><span>Evénement</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('evenement_listCitoyen') }}">liste des Evenements</a></li>
							<li><a href="{{ path('ajouter_voteFront') }}">Ajouter proposition</a></li>
						</ul>
					</li>
					<li><a href="{{ path('equipement_show_front') }}">Equipement</a></li>
					<li><a href="{{ path('tache_listfront') }}" class="active">Taches</a></li>
					<li><a href="{{ path('chatgpt') }}">ChatGpt</a></li>
					<li class="dropdown"><a href="#"><span>Profile</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_profile_fron') }}">Profile</a></li>
							<li><a href="{{ path('sign_out') }}">Logout</a></li>
						</ul>
					</li>

{% elseif 'Directeur' in user.getTypeUser() %}
<li><a href="{{ path('app_main_front') }}" >Home</a></li>
					<li class="dropdown"><a href="#"><span>Actualité</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_actualiteshowResponsable') }}">Afficher Actualité</a></li>
							<li><a href="{{ path('ajouterA2') }}">Ajouter Actualité</a></li>
						</ul>
					</li>
					 <li class="dropdown"><a href="#"><span>Reclamation</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('afficherReclamationFA') }}">les Réclamations</a></li>
							<li><a href="{{ path('statsReclamationF') }}">Statistiques des Réclamations</a></li>
							<li><a href="{{ path('chatbot') }}">Chat for help</a></li>
						</ul>
					</li>
					<li class="dropdown"><a href="#" class="active"><span>Evenement</span> <i
						class="bi bi-chevron-down dropdown-indicator" class="active"></i></a>
						<ul>
							<li><a href="{{ path('evenement_listFront') }}">Liste des evenements</a></li>
							<li><a href="{{ path('ajouterFront_evenement') }}">Ajouter un evenement</a></li>
							<li><a href="{{ path('calendar') }}">Calendrier des evenements</a></li>
							<li><a href="{{ path('ajouter_voteFront') }}">Ajouter une proposition</a></li>
							<li><a href="{{ path('statsF') }}">Statistiques des evenements</a></li>

						</ul>
					</li>
					<li><a href="{{ path('equipement_show_responsable') }}">Equipement</a></li>
					<li><a href="{{ path('tache_listdir') }}">Taches</a></li>
					<li><a href="{{ path('chatgpt') }}">ChatGpt</a></li>
					<li class="dropdown"><a href="#"><span>Profile</span> <i
						class="bi bi-chevron-down dropdown-indicator" class=""></i></a>
						<ul>
							<li><a href="{{ path('app_profile_fron') }}">Profile</a></li>
							<li><a href="{{ path('sign_out') }}">Logout</a></li>
						</ul>
					</li>

{% endif %}

					
{% endblock %}


{% block body %}
    {% if flash_message is not empty %}
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            {{ flash_message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endif %}
    <div class="actions-container">
        <div class="actions">
            <!-- Add the instruction button -->
            <div id="tutorial-container"></div>
            <button id="instruction-button" class="btn btn-primary">TUTORIEL</button>
            <a href="{{ path('tache_download_csv') }}" class="btn btn-primary">Export Excel</a>
            <label for="csv-file-input" class="btn btn-primary">Import CSV</label>
            <form id="csv-upload-form" action="{{ path('tache_import_csv') }}" method="post" enctype="multipart/form-data" style="display: none;">
                <input type="file" name="csv_file" accept=".csv" id="csv-file-input" onchange="this.form.submit()">
            </form>
        </div>
        <div id="chatbot-button" onclick="showChat()">
            <img src="{{ asset('back-office/img/chat-botT.gif') }}" alt="ChatBot" class="rounded-circle" style="width: 100px; height: auto;">
        </div>
        <div id="chat-container">
            <div id="chat-header" onclick="toggleChat()">Baladity</div>
            <div id="chat-area"></div>
            <input type="text" id="user-input">
            <button class="button" onclick="sendMessage()"><i class="bi bi-arrow-up-circle-fill"></i></button>
            <button class="button" onclick="clearConversation()"><i class="bi bi-trash-fill"></i></button>
            <button class="button" onclick="hideChat()">Hide Chat</button>
        </div>
    </div>
    <div class="d-flex justify-content-between">
        <div class="flex-fill mr-3">
            <div class="card">
                <div class="card-header">
                    <h2>TODO<span id="todo-counter" class="task-counter">{{ taches|filter(t => t.etatT == 'TODO')|length }}</span></h2>
                </div>
                <div class="card-body">
                    <div id="TODO" class="grid">
                        {% for tache in taches %}
                            {% if tache.etatT == 'TODO' %}
                                <div class="tache" draggable="true" id="{{ tache.idT }}">
                                    <h6>
                                        {{ tache.titreT }}
                                        <button id="detail-front" onclick="location.href='{{ path('tache_detail_front', {'i': tache.getIdT()}) }}'" type="button" class="btn btn-outline-primary"><i class="bi bi-info-circle"></i></button>
                                    </h6>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        <div class="flex-fill mx-3">
            <div class="card">
                <div class="card-header">
                    <h2>DOING<span id="doing-counter" class="task-counter">{{ taches|filter(t => t.etatT == 'DOING')|length }}</span></h2>
                </div>
                <div class="card-body">
                    <div id="DOING" class="grid">
                        {% for tache in taches %}
                            {% if tache.etatT == 'DOING' %}
                                <div class="tache" draggable="true" id="{{ tache.idT }}">
                                    <h6>
                                        {{ tache.titreT }}
                                        <button id="detail-front" onclick="location.href='{{ path('tache_detail_front', {'i': tache.getIdT()}) }}'" type="button" class="btn btn-outline-primary"><i class="bi bi-info-circle"></i></button>
                                    </h6>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
        <div class="flex-fill ml-3">
            <div class="card">
                <div class="card-header">
                    <h2>DONE<span id="done-counter" class="task-counter">{{ taches|filter(t => t.etatT == 'DONE')|length }}</span></h2>
                </div>
                <div class="card-body">
                    <div id="DONE" class="grid">
                        {% for tache in taches %}
                            {% if tache.etatT == 'DONE' %}
                                <div class="tache" draggable="true" id="{{ tache.idT }}">
                                    <h6>
                                        {{ tache.titreT }}
                                        <button id="detail-front" onclick="location.href='{{ path('tache_detail_front', {'i': tache.getIdT()}) }}'" type="button" class="btn btn-outline-primary"><i class="bi bi-info-circle"></i></button>
                                    </h6>
                                </div>
                            {% endif %}
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div>
        {% if quote %}
            <div class="quote-container">
                <blockquote class="quote" id="quote">
                    <div>{{ quote.content }}</div>
                    <footer class="author">{{ quote.author }}</footer>
                    <div class="button-container">
                        <!-- Reload quote button -->
                        <button class="btn btn-primary refresh-btn" onclick="refreshQuote()"><i class="bi bi-arrow-clockwise"></i></button>
                        <!-- Voice button -->
                        <button class="btn btn-primary voice-btn" onclick="readQuote()"><i class="bi bi-mic"></i></button>
                    </div>
                </blockquote>
            </div>
        {% endif %}
    </div>

<style>
    .button.button {
        background-color: #012545;
        color: solid white;
    }
    /* Center the tutorial container */
    #tutorial-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Style the video to be responsive and centered */
    #tutorial-container iframe {
        max-width: 100%; /* Ensure the video does not exceed its container */
        max-height: 100%; /* Ensure the video does not exceed its container */
    }
   /* Actions Container Styles */
   .actions-container {
      display: flex;
      flex-direction: column;
   }
   .actions {
      margin-bottom: 10px; /* Add margin between buttons */
   }
   /* Quote Styles */
   .quote-container {
   flex: 1; /* Expand to fill remaining space */
   margin-left: 20px; /* Add space between actions and quote */
   position: relative; /* Make the container relative */
   }
   .quote {
   font-style: italic;
   padding: 20px;
   margin: 0;
   background-color: #f8f9fa; /* Light background color */
   border-radius: 10px; /* Add rounded corners */
   }
   .quote div {
   color: #012545;
   margin: 0;
   font-size: 1.2em;
   line-height: 1.5;
   text-decoration: underline;
   text-decoration-style: solid;
   }
   .quote footer {
   margin-top: 10px;
   font-size: 1em;
   font-weight: bold;
   color: #666; /* Change color to your preference */
   }
   /* Position the buttons horizontally */
   .button-container {
       display: flex;
       align-items: center; /* Center vertically */
   }
   /* Adjust margin between buttons */
   .refresh-btn {
       margin-right: 5px;
   }
   .grid {
   min-height: 400px;
   max-height: 400px; /* Set maximum height */
   overflow-y: auto;  /* Add vertical scrollbar when content exceeds max-height */
   min-width: 400px
   }
   .tache {
   position: relative;
   margin: 0px 0px 25px 0px;
   padding: 10px;
   border-radius: 5px;
   border: solid;
   font-size: 14px;
   border-color: red #012545;
   }
   #detail-front {
   margin: 0px 0px 0px 10px;
   }
   .card-header {
   color: #012545;
   margin: 0px 0px 0px 0px;
   position: relative;
   border-radius: 4px;
   border: dashed #012545;
   }
   .task-counter {
   color: #012545;
   position: absolute;
   margin: 0px 0px 0px 25px;
   border-radius: 30px;
   border: solid red;
   font-size: x-small;
   padding: 10px;
   }
   /* Chat Container Styling */
   #chat-container {
   display: none;
   position: fixed;
   bottom: 60px;
   right: 20px;
   width: 400px;
   height: 400px;
   border: 1px solid #ccc;
   border-radius: 10px;
   background-color: #f9f9f9;
   box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.5);
   overflow: hidden;
   font-family: Arial, sans-serif;
   z-index: 9999; /* Set a high z-index value */
   }
   /* Chat Header Styling */
   #chat-header {
   background-color: #012545;
   color: #fff;
   padding: 10px;
   cursor: pointer;
   }
   /* Chat Area Styling */
   #chat-area {
   height: calc(100% - 150px); /* Changed height calculation */
   overflow-y: auto;
   padding: 10px;
   border-bottom: 1px solid #ccc;
   color: #012545;
   }
   /* Input Field Styling */
   #user-input {
   width: calc(100% - 20px);
   margin: 10px;
   padding: 5px;
   border: 1px solid #ccc;
   border-radius: 5px;
   }
   /* Button Styling */
   .button {
   width: calc(50% - 15px);
   margin: 5px;
   padding: 10px;
   border: none;
   border-radius: 5px;
   background-color: #4285f4;
   color: #fff;
   cursor: pointer;
   }
   .button:hover {
   background-color: #3c78dc;
   }
   /* ChatBot Button Styling */
   #chatbot-button {
   position: fixed;
   bottom: 60px; /* Change bottom to top */
   right: 20px;
   cursor: pointer;
   z-index: 9999; /* Set a high z-index value */
   }
   #chatbot-button img {
   width: 100px;
   height: auto;
   border-radius: 50%;
   z-index: 10000; /* Set a higher z-index value than the container */
   }
</style>
<style>
   /* The switch - the box around the slider */
   .switch {
   display: block;
   --width-of-switch: 3.5em;
   --height-of-switch: 2em;
   /* size of sliding icon -- sun and moon */
   --size-of-icon: 1.4em;
   /* it is like a inline-padding of switch */
   --slider-offset: 0.3em;
   position: relative;
   width: var(--width-of-switch);
   height: var(--height-of-switch);
   }
   /* Hide default HTML checkbox */
   .switch input {
   opacity: 0;
   width: 0;
   height: 0;
   }
   /* The slider */
   .slider {
   position: absolute;
   cursor: pointer;
   top: 0;
   left: 0;
   right: 0;
   bottom: 0;
   background-color: #f4f4f5;
   transition: .4s;
   border-radius: 30px;
   }
   .slider:before {
   position: absolute;
   content: "";
   height: var(--size-of-icon,1.4em);
   width: var(--size-of-icon,1.4em);
   border-radius: 20px;
   left: var(--slider-offset,0.3em);
   top: 50%;
   transform: translateY(-50%);
   background: #c31432; /* fallback for old browsers */
   background: -webkit-linear-gradient(to right, #c31432, #240b36); /* Chrome 10-25, Safari 5.1-6 */
   background: linear-gradient(to right, #c31432, #240b36);
   ;
   transition: .4s;
   }
   input:checked + .slider {
   background-color: #303136;
   }
   input:checked + .slider:before {
   left: calc(100% - (var(--size-of-icon,1.4em) + var(--slider-offset,0.3em)));
   background: #303136;
   /* change the value of second inset in box-shadow to change the angle and direction of the moon  */
   box-shadow: inset -3px -2px 5px -2px #8983f7, inset -10px -4px 0 0 #a3dafb;
   }
</style>
<style>
   /* Dark Mode Styles */
   .dark-mode {
   /* Background color */
   background-color: #121212;
   color: #ffffff; /* Text color */
   /* Card background color */
   .card {
   background-color: #1e1e1e;
   color: #ffffff; /* Card text color */
   }
   /* Card header background color */
   .card-header {
   background-color: #2e2e2e;
   color: #ffffff; /* Card header text color */
   }
   /* Button background color */
   .btn {
   background-color: #424242;
   color: #ffffff; /* Button text color */
   }
   /* Button hover background color */
   .btn:hover {
   background-color: #555555;
   }
   /* Input background color */
   input {
   background-color: #333333;
   color: #ffffff; /* Input text color */
   }
   /* Slider background color */
   .slider {
   background-color: #555555;
   }
   /* Slider before color */
   .slider:before {
   background: linear-gradient(40deg, #ff0080, #ff8c00 70%);
   box-shadow: inset -3px -2px 5px -2px #8983f7, inset -10px -4px 0 0 #a3dafb;
   }
   /* Task counter color */
   .task-counter {
   color: #ffffff;
   }
   /* Chat container background color */
   #chat-container {
   background-color: #212121;
   }
   /* Chat header background color */
   #chat-header {
   background-color: #333333;
   color: #ffffff; /* Chat header text color */
   }
   /* Chat area background color */
   #chat-area {
   background-color: #2c2c2c;
   color: #ffffff; /* Chat area text color */
   }
   /* Chat input background color */
   #user-input {
   background-color: #333333;
   color: #ffffff; /* Chat input text color */
   }
   /* Chat button background color */
   .button {
   background-color: #424242;
   color: #ffffff; /* Chat button text color */
   }
   /* Chat bot button image filter */
   #chatbot-button img {
   filter: invert(1);
   }
   /* Alert background color */
   .alert {
   background-color: #333333;
   border-color: #555555;
   color: #ffffff; /* Alert text color */
   }
   /* Alert close button background color */
   .btn-close {
   filter: invert(1);
   }
   }
</style>
<script>
    // Define a variable to track whether the tutorial card is already created
    var tutorialCardCreated = false;

    // Add event listener to the instruction button
    document.getElementById('instruction-button').addEventListener('click', function() {
        // Check if the tutorial card is already created
        if (!tutorialCardCreated) {
            // Create a new card body for embedding the video
            var newCardBody = document.createElement('div');
            newCardBody.className = 'card-body';
            // Add styling to center the video
            newCardBody.innerHTML = '<div id="tutorial-container"><iframe width="560" height="315" src="https://www.youtube.com/embed/Qz2wnSVeITg?si=5nQsS7jh8lT2TuqP" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div>';
            // Append the new card body to the existing container
            var tutorialContainer = document.getElementById('tutorial-container');
            tutorialContainer.appendChild(newCardBody);

            // Set tutorialCardCreated to true
            tutorialCardCreated = true;
        }
    });
</script>
<script>
    // Define voice index to keep track of the selected voice
    var voiceIndex = 0;
    var isReading = false; // Variable to track whether the quote is being read
    
    // Function to read the quote aloud with different voices
    function readQuote() {
        // Disable the voice and refresh buttons while reading
        var voiceButton = document.querySelector('.voice-btn');
        var refreshButton = document.querySelector('.refresh-btn');
        voiceButton.disabled = true;
        refreshButton.disabled = true;
    
        var quoteContent = document.getElementById('quote').querySelector('div').textContent;
        var quoteAuthor = document.getElementById('quote').querySelector('.author').textContent;
        var textToRead = quoteContent + " by " + quoteAuthor;
    
        // Create a new SpeechSynthesisUtterance object
        var utterance = new SpeechSynthesisUtterance(textToRead);
    
        // Get available voices
        var voices = speechSynthesis.getVoices();
    
        // Select the voice based on voiceIndex
        utterance.voice = voices[voiceIndex];
    
        // Increment voiceIndex for the next call
        voiceIndex = (voiceIndex + 1) % voices.length;
    
        // Speak the text
        speechSynthesis.speak(utterance);
    
        // Set isReading to true
        isReading = true;
    
        // Listen for the end of speech synthesis
        utterance.onend = function() {
            // Re-enable the voice and refresh buttons after reading is complete
            voiceButton.disabled = false;
            refreshButton.disabled = false;
            isReading = false;
        };
    }
    
    // Function to refresh the quote
    function refreshQuote() {
        // If reading is in progress, prevent refreshing the quote
        if (isReading) {
            return;
        }
    
        fetch('https://api.quotable.io/random')
            .then(response => response.json())
            .then(data => {
                // Update the quote content
                document.getElementById('quote').querySelector('div').textContent = data.content;
                document.getElementById('quote').querySelector('.author').textContent = data.author;
            })
            .catch(error => {
                console.error('Error fetching quote:', error);
            });
    }
    
</script>
<script>
   // Function to toggle dark mode
   function toggleDarkMode() {
       var body = document.body;
       body.classList.toggle('dark-mode');
   }
   
   // Add event listener to the checkbox
   document.getElementById('dark-mode-checkbox').addEventListener('change', function() {
       toggleDarkMode();
   });
</script>
<script>
   document.addEventListener("DOMContentLoaded", function() {
   var userInputField = document.getElementById('user-input');
   userInputField.addEventListener("keypress", function(event) {
       if (event.key === "Enter") {
           sendMessage();
       }
   });
   });
   function toggleChat() {
       var chatContainer = document.getElementById('chat-container');
       chatContainer.style.display = chatContainer.style.display === 'none' ? 'block' : 'none';
   }
   
   function showChat() {
       var chatContainer = document.getElementById('chat-container');
       chatContainer.style.display = 'block';
   }


   // Function to speak text in French
   function speakFrench(text) {
       var utterance = new SpeechSynthesisUtterance(text);
       utterance.lang = 'fr-FR'; // Set language to French
       speechSynthesis.speak(utterance);
   }

   function sendMessage() {
    var userInput = document.getElementById('user-input').value;
    var chatArea = document.getElementById('chat-area');

    var formData = new FormData();
    formData.append('user_input', userInput);

    fetch('{{ path('chatbot_process') }}', {
        method: 'POST',
        body: formData
    })
    .then(response => response.text())
    .then(data => {
        chatArea.innerHTML += 'You : ' + userInput + '<br>';
        chatArea.innerHTML += '<img src="{{ asset('back-office/img/chat-botT.gif') }}" alt="ChatBot" class="rounded-circle" style="width: 50px; height: auto;"> :   ' + data + '<br>';

        // Speak the chatbot's response in French
        speakFrench(data);

        // Scroll to the bottom of the chat area
        chatArea.scrollTop = chatArea.scrollHeight;
    });

    // Clear user input field
    document.getElementById('user-input').value = '';
    document.getElementById('user-input').focus();
}

// Function to clear conversation
function clearConversation() {
    var chatArea = document.getElementById('chat-area');
    chatArea.innerHTML = '';

    // After clearing, scroll to the bottom
    chatArea.scrollTop = chatArea.scrollHeight;
}
   
   function hideChat() {
       var chatContainer = document.getElementById('chat-container');
       chatContainer.style.display = 'none';
   }
</script>
{% endblock %}
{%block rest%}{% endblock %}
